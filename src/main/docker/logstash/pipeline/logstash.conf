input {
  tcp {
    port => 5044
    codec => json_lines {
      ecs_compatibility => disabled
    }
  }
}

filter {
  # Añadir timestamp si no existe
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }

  # Parsear logs de Spring Boot
  if [logger_name] {
    mutate {
      add_field => { "service" => "expenses-app" }
      add_field => { "application" => "expenses" }
    }
  }

  # Clasificar tipo de log basado en el logger_name
  if [logger_name] =~ /^com\.jhipster\.demo\.expenses/ {
    mutate {
      add_field => { "log_type" => "application" }
    }
  } else if [logger_name] =~ /^org\.springframework/ {
    mutate {
      add_field => { "log_type" => "framework" }
    }
  } else if [logger_name] =~ /^org\.hibernate/ {
    mutate {
      add_field => { "log_type" => "database" }
    }
  } else {
    mutate {
      add_field => { "log_type" => "system" }
    }
  }

  # Añadir metadatos útiles
  mutate {
    add_field => { "environment" => "docker" }
    add_field => { "stack_version" => "elk-7.17.10" }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "expenses-logs-%{+YYYY.MM.dd}"
    ecs_compatibility => disabled
  }

  # Para debug, solo mostrar logs de nivel ERROR o superior
  if [level] in ["ERROR", "FATAL"] {
    stdout {
      codec => rubydebug {
        ecs_compatibility => disabled
      }
    }
  }
}
