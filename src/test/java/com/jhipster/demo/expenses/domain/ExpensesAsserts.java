package com.jhipster.demo.expenses.domain;

import static com.jhipster.demo.expenses.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ExpensesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpensesAllPropertiesEquals(Expenses expected, Expenses actual) {
        assertExpensesAutoGeneratedPropertiesEquals(expected, actual);
        assertExpensesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpensesAllUpdatablePropertiesEquals(Expenses expected, Expenses actual) {
        assertExpensesUpdatableFieldsEquals(expected, actual);
        assertExpensesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpensesAutoGeneratedPropertiesEquals(Expenses expected, Expenses actual) {
        assertThat(expected)
            .as("Verify Expenses auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpensesUpdatableFieldsEquals(Expenses expected, Expenses actual) {
        assertThat(expected)
            .as("Verify Expenses relevant properties")
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpensesUpdatableRelationshipsEquals(Expenses expected, Expenses actual) {
        // empty method
    }
}
